// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "hardhat/console.sol";

contract DegenToken is ERC20, Ownable, ERC20Burnable {
    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        // Items
        items[1] = Item("Dog", 500);
        items[2] = Item("Wolf", 700);
        items[3] = Item("Kingkong", 1200);
        items[4] = Item("Dragon", 1800);
        items[5] = Item("9 Tails Beast", 2000);
    }

    struct Item {
        string name;
        uint256 cost;
    }

    mapping(uint256 => Item) public items;

    function mint(address owner, address to, uint256 amount) public onlyOwner {
        require(msg.sender == owner, "Only the owner can mint tokens.");
        _mint(to, amount);
    }

    function getBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }

    function transferTokens(address _receiver, uint256 _value) public {
        require(balanceOf(msg.sender) >= _value, "Insufficient Degen Tokens");
        approve(msg.sender, _value);
        transferFrom(msg.sender, _receiver, _value);
    }
    
    function burnTokens(address _player, uint256 _value) public {
        require(balanceOf(_player) >= _value, "Insufficient Degen Tokens");
        _burn(_player, _value);
    }

    function listAvailableItems() external view returns (ItemInfo[] memory) {
        ItemInfo[] memory availableItems = new ItemInfo[](5);
        uint256 itemCount = 0;

        for (uint256 i = 1; i <= 5; i++) {
            if (items[i].cost > 0) {
                availableItems[itemCount] = ItemInfo(i , items[i].name , items[i].cost);
                itemCount++;
            }
        }

        return availableItems;
    }

    struct ItemInfo {
        uint256 id;
        string name;
        uint256 cost;
    }

    function redeem(address _player, uint256 itemId) public returns (string memory) {
        require(balanceOf(_player) > 0, "Insufficient Degen Tokens");
        require(items[itemId].cost > 0, "Invalid Item ID");
        require(balanceOf(_player) >= items[itemId].cost, "Not enough tokens to redeem this item");

        string memory itemName = items[itemId].name;

        _burn(_player, items[itemId].cost);

        console.log("Item redeemed by:", _player);
        console.log("Item name:", itemName);

        return itemName;
    }

}
