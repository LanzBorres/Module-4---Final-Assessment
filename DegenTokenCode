// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;


import "@openzeppelin/contracts/token/ERC20/ERC20.sol"; 
import "@openzeppelin/contracts/access/Ownable.sol";     

contract DegenToken is ERC20("Degen", "DGN"), Ownable(msg.sender) {
    string public MyTokens = "" ; 

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function transferTokens(address to, uint256 amount) external {
        _transfer(_msgSender(), to, amount);
    }

    function burnTokens(uint256 amount) external {
        _burn(_msgSender(), amount);
    }

    function store() public pure returns (string memory) {
        return
            "1. Dog = 500 \n 2. Wolf = 700 \n 3. Kingkong = 1200 \n 4. Dragon = 1800  \n 5. 9 Tails Beast= 2000";
    }

    function redeemTokens(uint256 choice) external payable {
        require(choice >= 1 && choice <= 5, "Invalid selection");  // check the codition

        uint256 value;  
        string memory petName; 


        if (choice == 1) {
            value = 500;
            petName = "Dog";
        } else if (choice == 2) {
            value = 700 ;
            petName = "Wolf";
        } else if (choice == 3) {
            value = 1200 ;
            petName = "Kingkong";
        } else if (choice == 4) {
            value = 1800 ;
            petName = "Dragon";
        } else if (choice == 5) {
            value = 2000;
            petName = "9 Tails Beast";
        } else {}


        require(balanceOf(_msgSender()) >= value, "Insufficient balance");
        transferTo(address(this), value);

        MyTokens = string.concat(MyTokens,petName,", ");
    }
    
    function transferTo(address _to, uint256 amount) public {
        transfer(_to, amount);
    }
    
}
