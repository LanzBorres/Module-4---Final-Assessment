// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.20;

import "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts@5.0.2/access/Ownable.sol";

contract Degen is ERC20, Ownable {

    uint256[] internal itemIds;
    mapping(uint256 => Item) public items;

    struct Item {
        string name;
        uint256 cost;
    }

    constructor(address initialOwner)
        ERC20("Degen", "DGN")
        Ownable(initialOwner)
    {}

    function mint(uint256 amount) public onlyOwner {
        _mint(msg.sender, amount);
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function createItem(string memory _name, uint256 _cost) external onlyOwner {
        Item memory newItem = Item({name: _name, cost: _cost});
        items[itemIds.length] = newItem;

        itemIds.push(itemIds.length);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }  

    function transferTo(address to, uint256 amount) public  {
        transfer(to, amount);
    }

    function redeemItem(uint256 id) external {
        require(items[id].cost > 0, "Item does not exist");
        require(balanceOf(msg.sender) >= items[id].cost, "Insufficient balance");

        _transfer(msg.sender, address(this), items[id].cost);

        delete items[id];
    }
    
}
